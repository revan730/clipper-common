// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CD.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Deployment struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Branch               string   `protobuf:"bytes,2,opt,name=Branch,proto3" json:"Branch,omitempty"`
	ArtifactID           int64    `protobuf:"varint,3,opt,name=ArtifactID,proto3" json:"ArtifactID,omitempty"`
	K8SName              string   `protobuf:"bytes,4,opt,name=K8SName,proto3" json:"K8SName,omitempty"`
	Manifest             string   `protobuf:"bytes,5,opt,name=Manifest,proto3" json:"Manifest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deployment) Reset()         { *m = Deployment{} }
func (m *Deployment) String() string { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()    {}
func (*Deployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_CD_007861780a6a2a09, []int{0}
}
func (m *Deployment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deployment.Unmarshal(m, b)
}
func (m *Deployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deployment.Marshal(b, m, deterministic)
}
func (dst *Deployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deployment.Merge(dst, src)
}
func (m *Deployment) XXX_Size() int {
	return xxx_messageInfo_Deployment.Size(m)
}
func (m *Deployment) XXX_DiscardUnknown() {
	xxx_messageInfo_Deployment.DiscardUnknown(m)
}

var xxx_messageInfo_Deployment proto.InternalMessageInfo

func (m *Deployment) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Deployment) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *Deployment) GetArtifactID() int64 {
	if m != nil {
		return m.ArtifactID
	}
	return 0
}

func (m *Deployment) GetK8SName() string {
	if m != nil {
		return m.K8SName
	}
	return ""
}

func (m *Deployment) GetManifest() string {
	if m != nil {
		return m.Manifest
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_CD_007861780a6a2a09, []int{1}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Deployment)(nil), "types.Deployment")
	proto.RegisterType((*Empty)(nil), "types.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CDAPIClient is the client API for CDAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CDAPIClient interface {
	CreateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Empty, error)
}

type cDAPIClient struct {
	cc *grpc.ClientConn
}

func NewCDAPIClient(cc *grpc.ClientConn) CDAPIClient {
	return &cDAPIClient{cc}
}

func (c *cDAPIClient) CreateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/types.CDAPI/CreateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CDAPIServer is the server API for CDAPI service.
type CDAPIServer interface {
	CreateDeployment(context.Context, *Deployment) (*Empty, error)
}

func RegisterCDAPIServer(s *grpc.Server, srv CDAPIServer) {
	s.RegisterService(&_CDAPI_serviceDesc, srv)
}

func _CDAPI_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDAPIServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.CDAPI/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDAPIServer).CreateDeployment(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

var _CDAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.CDAPI",
	HandlerType: (*CDAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeployment",
			Handler:    _CDAPI_CreateDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CD.proto",
}

func init() { proto.RegisterFile("CD.proto", fileDescriptor_CD_007861780a6a2a09) }

var fileDescriptor_CD_007861780a6a2a09 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x70, 0x76, 0xd1, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x56, 0xea, 0x62, 0xe4, 0xe2,
	0x72, 0x49, 0x2d, 0xc8, 0xc9, 0xaf, 0xcc, 0x4d, 0xcd, 0x2b, 0x11, 0xe2, 0xe3, 0x62, 0xf2, 0x74,
	0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x62, 0xf2, 0x74, 0x11, 0x12, 0xe3, 0x62, 0x73, 0x2a,
	0x4a, 0xcc, 0x4b, 0xce, 0x90, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x84, 0xe4, 0xb8,
	0xb8, 0x1c, 0x8b, 0x4a, 0x32, 0xd3, 0x12, 0x93, 0x4b, 0x3c, 0x5d, 0x24, 0x98, 0xc1, 0xea, 0x91,
	0x44, 0x84, 0x24, 0xb8, 0xd8, 0xbd, 0x2d, 0x82, 0xfd, 0x12, 0x73, 0x53, 0x25, 0x58, 0xc0, 0x1a,
	0x61, 0x5c, 0x21, 0x29, 0x2e, 0x0e, 0xdf, 0xc4, 0xbc, 0xcc, 0xb4, 0xd4, 0xe2, 0x12, 0x09, 0x56,
	0xb0, 0x14, 0x9c, 0xaf, 0xc4, 0xce, 0xc5, 0xea, 0x9a, 0x5b, 0x50, 0x52, 0x69, 0x64, 0xc7, 0xc5,
	0xea, 0xec, 0xe2, 0x18, 0xe0, 0x29, 0x64, 0xca, 0x25, 0xe0, 0x5c, 0x94, 0x9a, 0x58, 0x92, 0x8a,
	0xe4, 0x46, 0x41, 0x3d, 0xb0, 0xd3, 0xf5, 0x10, 0x42, 0x52, 0x3c, 0x50, 0x21, 0xb0, 0x6e, 0x25,
	0x86, 0x24, 0x36, 0xb0, 0x1f, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x05, 0x18, 0xbc, 0x9c,
	0xef, 0x00, 0x00, 0x00,
}
