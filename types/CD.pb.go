// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CD.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Deployment struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Branch               string   `protobuf:"bytes,2,opt,name=Branch,proto3" json:"Branch,omitempty"`
	RepoID               int64    `protobuf:"varint,3,opt,name=RepoID,proto3" json:"RepoID,omitempty"`
	ArtifactID           int64    `protobuf:"varint,4,opt,name=ArtifactID,proto3" json:"ArtifactID,omitempty"`
	K8SName              string   `protobuf:"bytes,5,opt,name=K8SName,proto3" json:"K8SName,omitempty"`
	Manifest             string   `protobuf:"bytes,6,opt,name=Manifest,proto3" json:"Manifest,omitempty"`
	Replicas             int64    `protobuf:"varint,7,opt,name=Replicas,proto3" json:"Replicas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deployment) Reset()         { *m = Deployment{} }
func (m *Deployment) String() string { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()    {}
func (*Deployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_CD_abb5c57d18c5690b, []int{0}
}
func (m *Deployment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deployment.Unmarshal(m, b)
}
func (m *Deployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deployment.Marshal(b, m, deterministic)
}
func (dst *Deployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deployment.Merge(dst, src)
}
func (m *Deployment) XXX_Size() int {
	return xxx_messageInfo_Deployment.Size(m)
}
func (m *Deployment) XXX_DiscardUnknown() {
	xxx_messageInfo_Deployment.DiscardUnknown(m)
}

var xxx_messageInfo_Deployment proto.InternalMessageInfo

func (m *Deployment) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Deployment) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *Deployment) GetRepoID() int64 {
	if m != nil {
		return m.RepoID
	}
	return 0
}

func (m *Deployment) GetArtifactID() int64 {
	if m != nil {
		return m.ArtifactID
	}
	return 0
}

func (m *Deployment) GetK8SName() string {
	if m != nil {
		return m.K8SName
	}
	return ""
}

func (m *Deployment) GetManifest() string {
	if m != nil {
		return m.Manifest
	}
	return ""
}

func (m *Deployment) GetReplicas() int64 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

type DeploymentsQuery struct {
	Page                 int64    `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
	Limit                int64    `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeploymentsQuery) Reset()         { *m = DeploymentsQuery{} }
func (m *DeploymentsQuery) String() string { return proto.CompactTextString(m) }
func (*DeploymentsQuery) ProtoMessage()    {}
func (*DeploymentsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_CD_abb5c57d18c5690b, []int{1}
}
func (m *DeploymentsQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeploymentsQuery.Unmarshal(m, b)
}
func (m *DeploymentsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeploymentsQuery.Marshal(b, m, deterministic)
}
func (dst *DeploymentsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentsQuery.Merge(dst, src)
}
func (m *DeploymentsQuery) XXX_Size() int {
	return xxx_messageInfo_DeploymentsQuery.Size(m)
}
func (m *DeploymentsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentsQuery proto.InternalMessageInfo

func (m *DeploymentsQuery) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *DeploymentsQuery) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type DeploymentsArray struct {
	Deployments          []*Deployment `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeploymentsArray) Reset()         { *m = DeploymentsArray{} }
func (m *DeploymentsArray) String() string { return proto.CompactTextString(m) }
func (*DeploymentsArray) ProtoMessage()    {}
func (*DeploymentsArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_CD_abb5c57d18c5690b, []int{2}
}
func (m *DeploymentsArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeploymentsArray.Unmarshal(m, b)
}
func (m *DeploymentsArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeploymentsArray.Marshal(b, m, deterministic)
}
func (dst *DeploymentsArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentsArray.Merge(dst, src)
}
func (m *DeploymentsArray) XXX_Size() int {
	return xxx_messageInfo_DeploymentsArray.Size(m)
}
func (m *DeploymentsArray) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentsArray.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentsArray proto.InternalMessageInfo

func (m *DeploymentsArray) GetDeployments() []*Deployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

type Revision struct {
	ID                   int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DeploymentID         int64                `protobuf:"varint,2,opt,name=DeploymentID,proto3" json:"DeploymentID,omitempty"`
	ArtifactID           int64                `protobuf:"varint,3,opt,name=ArtifactID,proto3" json:"ArtifactID,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,4,opt,name=Date,proto3" json:"Date,omitempty"`
	Stdout               string               `protobuf:"bytes,5,opt,name=Stdout,proto3" json:"Stdout,omitempty"`
	Replicas             int64                `protobuf:"varint,6,opt,name=Replicas,proto3" json:"Replicas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Revision) Reset()         { *m = Revision{} }
func (m *Revision) String() string { return proto.CompactTextString(m) }
func (*Revision) ProtoMessage()    {}
func (*Revision) Descriptor() ([]byte, []int) {
	return fileDescriptor_CD_abb5c57d18c5690b, []int{3}
}
func (m *Revision) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Revision.Unmarshal(m, b)
}
func (m *Revision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Revision.Marshal(b, m, deterministic)
}
func (dst *Revision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Revision.Merge(dst, src)
}
func (m *Revision) XXX_Size() int {
	return xxx_messageInfo_Revision.Size(m)
}
func (m *Revision) XXX_DiscardUnknown() {
	xxx_messageInfo_Revision.DiscardUnknown(m)
}

var xxx_messageInfo_Revision proto.InternalMessageInfo

func (m *Revision) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Revision) GetDeploymentID() int64 {
	if m != nil {
		return m.DeploymentID
	}
	return 0
}

func (m *Revision) GetArtifactID() int64 {
	if m != nil {
		return m.ArtifactID
	}
	return 0
}

func (m *Revision) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Revision) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *Revision) GetReplicas() int64 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

type RevisionsQuery struct {
	DeploymentID         int64    `protobuf:"varint,1,opt,name=DeploymentID,proto3" json:"DeploymentID,omitempty"`
	Page                 int64    `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`
	Limit                int64    `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevisionsQuery) Reset()         { *m = RevisionsQuery{} }
func (m *RevisionsQuery) String() string { return proto.CompactTextString(m) }
func (*RevisionsQuery) ProtoMessage()    {}
func (*RevisionsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_CD_abb5c57d18c5690b, []int{4}
}
func (m *RevisionsQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevisionsQuery.Unmarshal(m, b)
}
func (m *RevisionsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevisionsQuery.Marshal(b, m, deterministic)
}
func (dst *RevisionsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevisionsQuery.Merge(dst, src)
}
func (m *RevisionsQuery) XXX_Size() int {
	return xxx_messageInfo_RevisionsQuery.Size(m)
}
func (m *RevisionsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RevisionsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RevisionsQuery proto.InternalMessageInfo

func (m *RevisionsQuery) GetDeploymentID() int64 {
	if m != nil {
		return m.DeploymentID
	}
	return 0
}

func (m *RevisionsQuery) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RevisionsQuery) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type RevisionsArray struct {
	Revisions            []*Revision `protobuf:"bytes,1,rep,name=revisions,proto3" json:"revisions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RevisionsArray) Reset()         { *m = RevisionsArray{} }
func (m *RevisionsArray) String() string { return proto.CompactTextString(m) }
func (*RevisionsArray) ProtoMessage()    {}
func (*RevisionsArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_CD_abb5c57d18c5690b, []int{5}
}
func (m *RevisionsArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevisionsArray.Unmarshal(m, b)
}
func (m *RevisionsArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevisionsArray.Marshal(b, m, deterministic)
}
func (dst *RevisionsArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevisionsArray.Merge(dst, src)
}
func (m *RevisionsArray) XXX_Size() int {
	return xxx_messageInfo_RevisionsArray.Size(m)
}
func (m *RevisionsArray) XXX_DiscardUnknown() {
	xxx_messageInfo_RevisionsArray.DiscardUnknown(m)
}

var xxx_messageInfo_RevisionsArray proto.InternalMessageInfo

func (m *RevisionsArray) GetRevisions() []*Revision {
	if m != nil {
		return m.Revisions
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_CD_abb5c57d18c5690b, []int{6}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Deployment)(nil), "types.Deployment")
	proto.RegisterType((*DeploymentsQuery)(nil), "types.DeploymentsQuery")
	proto.RegisterType((*DeploymentsArray)(nil), "types.DeploymentsArray")
	proto.RegisterType((*Revision)(nil), "types.Revision")
	proto.RegisterType((*RevisionsQuery)(nil), "types.RevisionsQuery")
	proto.RegisterType((*RevisionsArray)(nil), "types.RevisionsArray")
	proto.RegisterType((*Empty)(nil), "types.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CDAPIClient is the client API for CDAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CDAPIClient interface {
	GetRevisions(ctx context.Context, in *RevisionsQuery, opts ...grpc.CallOption) (*RevisionsArray, error)
	GetAllDeployments(ctx context.Context, in *DeploymentsQuery, opts ...grpc.CallOption) (*DeploymentsArray, error)
	GetDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Deployment, error)
	CreateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Empty, error)
	ChangeImage(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Empty, error)
	ScaleDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Empty, error)
	UpdateManifest(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Empty, error)
	DeleteDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Empty, error)
}

type cDAPIClient struct {
	cc *grpc.ClientConn
}

func NewCDAPIClient(cc *grpc.ClientConn) CDAPIClient {
	return &cDAPIClient{cc}
}

func (c *cDAPIClient) GetRevisions(ctx context.Context, in *RevisionsQuery, opts ...grpc.CallOption) (*RevisionsArray, error) {
	out := new(RevisionsArray)
	err := c.cc.Invoke(ctx, "/types.CDAPI/GetRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDAPIClient) GetAllDeployments(ctx context.Context, in *DeploymentsQuery, opts ...grpc.CallOption) (*DeploymentsArray, error) {
	out := new(DeploymentsArray)
	err := c.cc.Invoke(ctx, "/types.CDAPI/GetAllDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDAPIClient) GetDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, "/types.CDAPI/GetDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDAPIClient) CreateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/types.CDAPI/CreateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDAPIClient) ChangeImage(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/types.CDAPI/ChangeImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDAPIClient) ScaleDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/types.CDAPI/ScaleDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDAPIClient) UpdateManifest(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/types.CDAPI/UpdateManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDAPIClient) DeleteDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/types.CDAPI/DeleteDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CDAPIServer is the server API for CDAPI service.
type CDAPIServer interface {
	GetRevisions(context.Context, *RevisionsQuery) (*RevisionsArray, error)
	GetAllDeployments(context.Context, *DeploymentsQuery) (*DeploymentsArray, error)
	GetDeployment(context.Context, *Deployment) (*Deployment, error)
	CreateDeployment(context.Context, *Deployment) (*Empty, error)
	ChangeImage(context.Context, *Deployment) (*Empty, error)
	ScaleDeployment(context.Context, *Deployment) (*Empty, error)
	UpdateManifest(context.Context, *Deployment) (*Empty, error)
	DeleteDeployment(context.Context, *Deployment) (*Empty, error)
}

func RegisterCDAPIServer(s *grpc.Server, srv CDAPIServer) {
	s.RegisterService(&_CDAPI_serviceDesc, srv)
}

func _CDAPI_GetRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevisionsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDAPIServer).GetRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.CDAPI/GetRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDAPIServer).GetRevisions(ctx, req.(*RevisionsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDAPI_GetAllDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDAPIServer).GetAllDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.CDAPI/GetAllDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDAPIServer).GetAllDeployments(ctx, req.(*DeploymentsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDAPI_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDAPIServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.CDAPI/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDAPIServer).GetDeployment(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDAPI_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDAPIServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.CDAPI/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDAPIServer).CreateDeployment(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDAPI_ChangeImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDAPIServer).ChangeImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.CDAPI/ChangeImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDAPIServer).ChangeImage(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDAPI_ScaleDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDAPIServer).ScaleDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.CDAPI/ScaleDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDAPIServer).ScaleDeployment(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDAPI_UpdateManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDAPIServer).UpdateManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.CDAPI/UpdateManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDAPIServer).UpdateManifest(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDAPI_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDAPIServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.CDAPI/DeleteDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDAPIServer).DeleteDeployment(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

var _CDAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.CDAPI",
	HandlerType: (*CDAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRevisions",
			Handler:    _CDAPI_GetRevisions_Handler,
		},
		{
			MethodName: "GetAllDeployments",
			Handler:    _CDAPI_GetAllDeployments_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _CDAPI_GetDeployment_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _CDAPI_CreateDeployment_Handler,
		},
		{
			MethodName: "ChangeImage",
			Handler:    _CDAPI_ChangeImage_Handler,
		},
		{
			MethodName: "ScaleDeployment",
			Handler:    _CDAPI_ScaleDeployment_Handler,
		},
		{
			MethodName: "UpdateManifest",
			Handler:    _CDAPI_UpdateManifest_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _CDAPI_DeleteDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CD.proto",
}

func init() { proto.RegisterFile("CD.proto", fileDescriptor_CD_abb5c57d18c5690b) }

var fileDescriptor_CD_abb5c57d18c5690b = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xe3, 0x38, 0x4e, 0xda, 0x49, 0x48, 0xdb, 0x15, 0x1f, 0x96, 0x0f, 0x10, 0xf9, 0x94,
	0x0b, 0x2e, 0x4a, 0xa8, 0xe0, 0x80, 0x40, 0x21, 0x8b, 0x2c, 0x8b, 0x0f, 0x15, 0x07, 0xae, 0x48,
	0xdb, 0x64, 0x92, 0x5a, 0xf2, 0x97, 0xec, 0x0d, 0x92, 0x5f, 0x8e, 0x03, 0xcf, 0xc0, 0x03, 0x21,
	0xaf, 0xd7, 0xb1, 0x13, 0x47, 0x55, 0x7b, 0xf3, 0xfc, 0xf7, 0x3f, 0xe3, 0x99, 0xdf, 0xec, 0xc2,
	0xc9, 0x9c, 0x5a, 0x71, 0x12, 0xf1, 0x88, 0x68, 0x3c, 0x8b, 0x31, 0x35, 0x5e, 0x6c, 0xa2, 0x68,
	0xe3, 0xe3, 0xa5, 0x10, 0x6f, 0xb6, 0xeb, 0x4b, 0xee, 0x05, 0x98, 0x72, 0x16, 0xc4, 0x85, 0xcf,
	0xfc, 0xa3, 0x00, 0x50, 0x8c, 0xfd, 0x28, 0x0b, 0x30, 0xe4, 0x64, 0x08, 0x6d, 0x87, 0xea, 0xca,
	0x48, 0x19, 0xab, 0x6e, 0xdb, 0xa1, 0xe4, 0x29, 0x74, 0x3f, 0x26, 0x2c, 0x5c, 0xde, 0xea, 0xed,
	0x91, 0x32, 0x3e, 0x75, 0x65, 0x94, 0xeb, 0x2e, 0xc6, 0x91, 0x43, 0x75, 0x55, 0x78, 0x65, 0x44,
	0x9e, 0x03, 0xcc, 0x12, 0xee, 0xad, 0xd9, 0x92, 0x3b, 0x54, 0xef, 0x88, 0xb3, 0x9a, 0x42, 0x74,
	0xe8, 0x7d, 0x7e, 0xbb, 0xf8, 0xc6, 0x02, 0xd4, 0x35, 0x51, 0xb0, 0x0c, 0x89, 0x01, 0x27, 0x5f,
	0x59, 0xe8, 0xad, 0x31, 0xe5, 0x7a, 0x57, 0x1c, 0xed, 0xe2, 0xfc, 0xcc, 0xc5, 0xd8, 0xf7, 0x96,
	0x2c, 0xd5, 0x7b, 0xa2, 0xe6, 0x2e, 0x36, 0xdf, 0xc1, 0x79, 0xd5, 0x7f, 0xfa, 0x7d, 0x8b, 0x49,
	0x46, 0x08, 0x74, 0xae, 0xd9, 0x06, 0xe5, 0x1c, 0xe2, 0x9b, 0x3c, 0x06, 0xed, 0x8b, 0x17, 0x78,
	0x5c, 0x0c, 0xa2, 0xba, 0x45, 0x60, 0xda, 0x7b, 0xd9, 0xb3, 0x24, 0x61, 0x19, 0x99, 0x42, 0x7f,
	0x55, 0x69, 0xba, 0x32, 0x52, 0xc7, 0xfd, 0xc9, 0x85, 0x25, 0x80, 0x5a, 0x95, 0xdb, 0xad, 0xbb,
	0xcc, 0xbf, 0x4a, 0xde, 0xe3, 0x6f, 0x2f, 0xf5, 0xa2, 0xb0, 0x41, 0xd1, 0x84, 0x41, 0x95, 0xe7,
	0x50, 0xd9, 0xc2, 0x9e, 0x76, 0x40, 0x4e, 0x6d, 0x90, 0xb3, 0xa0, 0x43, 0x19, 0x47, 0xc1, 0xb4,
	0x3f, 0x31, 0xac, 0x62, 0xb1, 0x56, 0xb9, 0x58, 0xeb, 0x47, 0xb9, 0x58, 0x57, 0xf8, 0xf2, 0x0d,
	0x2d, 0xf8, 0x2a, 0xda, 0x72, 0x09, 0x5a, 0x46, 0x7b, 0x2c, 0xbb, 0x07, 0x2c, 0x7f, 0xc1, 0xb0,
	0x9c, 0x41, 0x92, 0x3c, 0xec, 0x5c, 0x39, 0xd2, 0x79, 0x49, 0xbb, 0x7d, 0x8c, 0xb6, 0x5a, 0xa7,
	0xfd, 0xa1, 0x56, 0xbf, 0x60, 0xfd, 0x12, 0x4e, 0x93, 0x52, 0x91, 0xa4, 0xcf, 0x24, 0xe9, 0xd2,
	0xe9, 0x56, 0x0e, 0xb3, 0x07, 0xda, 0xa7, 0x20, 0xe6, 0xd9, 0xe4, 0x9f, 0x0a, 0xda, 0x9c, 0xce,
	0xae, 0x1d, 0xf2, 0x1e, 0x06, 0x36, 0xf2, 0x5d, 0x59, 0xf2, 0xe4, 0x20, 0xbd, 0x18, 0xc4, 0x68,
	0xc8, 0xe2, 0xff, 0x66, 0x8b, 0xd8, 0x70, 0x61, 0x23, 0x9f, 0xf9, 0x7e, 0xed, 0x1e, 0x90, 0x67,
	0x8d, 0x6d, 0xcb, 0x32, 0x47, 0x0e, 0xca, 0x42, 0x6f, 0xe0, 0x91, 0x8d, 0xbc, 0xf6, 0x96, 0x9a,
	0x57, 0xc6, 0x68, 0x4a, 0x66, 0x8b, 0x5c, 0xc1, 0xf9, 0x3c, 0x41, 0xc6, 0xf1, 0xee, 0xdc, 0x81,
	0x94, 0x04, 0x00, 0xb3, 0x45, 0x5e, 0x41, 0x7f, 0x7e, 0xcb, 0xc2, 0x0d, 0x3a, 0x41, 0x4e, 0xfc,
	0x1e, 0x19, 0xaf, 0xe1, 0x6c, 0xb1, 0x64, 0xfe, 0x03, 0xff, 0x33, 0x85, 0xe1, 0xcf, 0x78, 0xc5,
	0x38, 0xee, 0x9e, 0xe3, 0x3d, 0x92, 0xae, 0xf2, 0x77, 0xe5, 0xe3, 0x03, 0x67, 0xba, 0xe9, 0x8a,
	0xeb, 0x3c, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x84, 0xd4, 0xc1, 0xc8, 0x04, 0x00, 0x00,
}
