// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: CI.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Build struct {
	ID                   int64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GithubRepoID         int64            `protobuf:"varint,2,opt,name=GithubRepoID,proto3" json:"GithubRepoID,omitempty"`
	IsSuccessfull        bool             `protobuf:"varint,3,opt,name=IsSuccessfull,proto3" json:"IsSuccessfull,omitempty"`
	Date                 *types.Timestamp `protobuf:"bytes,4,opt,name=Date" json:"Date,omitempty"`
	Branch               string           `protobuf:"bytes,5,opt,name=Branch,proto3" json:"Branch,omitempty"`
	Stdout               string           `protobuf:"bytes,6,opt,name=Stdout,proto3" json:"Stdout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Build) Reset()         { *m = Build{} }
func (m *Build) String() string { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()    {}
func (*Build) Descriptor() ([]byte, []int) {
	return fileDescriptor_CI_ccc4e00c4bc30a89, []int{0}
}
func (m *Build) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Build) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Build.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Build) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Build.Merge(dst, src)
}
func (m *Build) XXX_Size() int {
	return m.Size()
}
func (m *Build) XXX_DiscardUnknown() {
	xxx_messageInfo_Build.DiscardUnknown(m)
}

var xxx_messageInfo_Build proto.InternalMessageInfo

func (m *Build) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Build) GetGithubRepoID() int64 {
	if m != nil {
		return m.GithubRepoID
	}
	return 0
}

func (m *Build) GetIsSuccessfull() bool {
	if m != nil {
		return m.IsSuccessfull
	}
	return false
}

func (m *Build) GetDate() *types.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Build) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *Build) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

type BuildArtifact struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BuildID              int64    `protobuf:"varint,2,opt,name=BuildID,proto3" json:"BuildID,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildArtifact) Reset()         { *m = BuildArtifact{} }
func (m *BuildArtifact) String() string { return proto.CompactTextString(m) }
func (*BuildArtifact) ProtoMessage()    {}
func (*BuildArtifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_CI_ccc4e00c4bc30a89, []int{1}
}
func (m *BuildArtifact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildArtifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildArtifact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BuildArtifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildArtifact.Merge(dst, src)
}
func (m *BuildArtifact) XXX_Size() int {
	return m.Size()
}
func (m *BuildArtifact) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildArtifact.DiscardUnknown(m)
}

var xxx_messageInfo_BuildArtifact proto.InternalMessageInfo

func (m *BuildArtifact) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BuildArtifact) GetBuildID() int64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *BuildArtifact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Build)(nil), "types.Build")
	proto.RegisterType((*BuildArtifact)(nil), "types.BuildArtifact")
}
func (m *Build) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Build) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCI(dAtA, i, uint64(m.ID))
	}
	if m.GithubRepoID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCI(dAtA, i, uint64(m.GithubRepoID))
	}
	if m.IsSuccessfull {
		dAtA[i] = 0x18
		i++
		if m.IsSuccessfull {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Date != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCI(dAtA, i, uint64(m.Date.Size()))
		n1, err := m.Date.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Branch) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCI(dAtA, i, uint64(len(m.Branch)))
		i += copy(dAtA[i:], m.Branch)
	}
	if len(m.Stdout) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCI(dAtA, i, uint64(len(m.Stdout)))
		i += copy(dAtA[i:], m.Stdout)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BuildArtifact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildArtifact) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCI(dAtA, i, uint64(m.ID))
	}
	if m.BuildID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCI(dAtA, i, uint64(m.BuildID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCI(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCI(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Build) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCI(uint64(m.ID))
	}
	if m.GithubRepoID != 0 {
		n += 1 + sovCI(uint64(m.GithubRepoID))
	}
	if m.IsSuccessfull {
		n += 2
	}
	if m.Date != nil {
		l = m.Date.Size()
		n += 1 + l + sovCI(uint64(l))
	}
	l = len(m.Branch)
	if l > 0 {
		n += 1 + l + sovCI(uint64(l))
	}
	l = len(m.Stdout)
	if l > 0 {
		n += 1 + l + sovCI(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuildArtifact) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCI(uint64(m.ID))
	}
	if m.BuildID != 0 {
		n += 1 + sovCI(uint64(m.BuildID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCI(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCI(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCI(x uint64) (n int) {
	return sovCI(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Build) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Build: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Build: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GithubRepoID", wireType)
			}
			m.GithubRepoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GithubRepoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccessfull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccessfull = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCI
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Date == nil {
				m.Date = &types.Timestamp{}
			}
			if err := m.Date.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCI
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Branch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stdout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCI
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stdout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildArtifact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildArtifact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildArtifact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildID", wireType)
			}
			m.BuildID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCI
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCI(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCI
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCI
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCI
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCI
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCI
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCI(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCI = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCI   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("CI.proto", fileDescriptor_CI_ccc4e00c4bc30a89) }

var fileDescriptor_CI_ccc4e00c4bc30a89 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4e, 0x83, 0x30,
	0x1c, 0xc6, 0xd7, 0x6d, 0x4c, 0xf6, 0x77, 0x33, 0xa6, 0x07, 0xd3, 0x70, 0x40, 0x42, 0x3c, 0x70,
	0xea, 0xe2, 0x7c, 0x82, 0x31, 0x92, 0xa5, 0x07, 0x8d, 0xe9, 0x7c, 0x01, 0x60, 0x65, 0x23, 0x01,
	0x4b, 0xa0, 0x3d, 0xf8, 0x26, 0xbe, 0x8e, 0x37, 0x8f, 0x3e, 0x82, 0xc1, 0x17, 0x31, 0x16, 0x31,
	0x21, 0xde, 0xfa, 0xfb, 0xf5, 0x3b, 0x7c, 0xdf, 0x1f, 0xec, 0x2d, 0xa3, 0x55, 0x2d, 0x95, 0xc4,
	0x96, 0x7a, 0xa9, 0x44, 0xe3, 0x5c, 0x1f, 0xa5, 0x3c, 0x16, 0x62, 0x65, 0x64, 0xa2, 0xb3, 0x95,
	0xca, 0x4b, 0xd1, 0xa8, 0xb8, 0xac, 0xba, 0x9c, 0xff, 0x86, 0xc0, 0x0a, 0x75, 0x5e, 0x1c, 0xf0,
	0x05, 0x8c, 0x59, 0x44, 0x90, 0x87, 0x82, 0x09, 0x1f, 0xb3, 0x08, 0xfb, 0xb0, 0xd8, 0xe5, 0xea,
	0xa4, 0x13, 0x2e, 0x2a, 0xc9, 0x22, 0x32, 0x36, 0x3f, 0x03, 0x87, 0x6f, 0x60, 0xc9, 0x9a, 0xbd,
	0x4e, 0x53, 0xd1, 0x34, 0x99, 0x2e, 0x0a, 0x32, 0xf1, 0x50, 0x60, 0xf3, 0xa1, 0xc4, 0x14, 0xa6,
	0x51, 0xac, 0x04, 0x99, 0x7a, 0x28, 0x38, 0x5f, 0x3b, 0xb4, 0xeb, 0x44, 0xfb, 0x4e, 0xf4, 0xa9,
	0xef, 0xc4, 0x4d, 0x0e, 0x5f, 0xc1, 0x2c, 0xac, 0xe3, 0xe7, 0xf4, 0x44, 0x2c, 0x0f, 0x05, 0x73,
	0xfe, 0x4b, 0x3f, 0x7e, 0xaf, 0x0e, 0x52, 0x2b, 0x32, 0xeb, 0x7c, 0x47, 0xfe, 0x3d, 0x2c, 0xcd,
	0x84, 0x4d, 0xad, 0xf2, 0x2c, 0x4e, 0xd5, 0xbf, 0x29, 0x04, 0xce, 0x4c, 0xe0, 0x6f, 0x45, 0x8f,
	0x18, 0xc3, 0xf4, 0x21, 0x2e, 0x85, 0xe9, 0x3d, 0xe7, 0xe6, 0xbd, 0xbe, 0x05, 0x6b, 0xcb, 0x36,
	0x8f, 0x0c, 0x07, 0x60, 0xef, 0x84, 0xea, 0xae, 0xb3, 0xa0, 0xe6, 0xa0, 0xd4, 0x90, 0x33, 0x20,
	0x7f, 0x14, 0x5e, 0xbe, 0xb7, 0x2e, 0xfa, 0x68, 0x5d, 0xf4, 0xd9, 0xba, 0xe8, 0xf5, 0xcb, 0x1d,
	0x25, 0x33, 0xb3, 0xee, 0xee, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xc0, 0x70, 0xc6, 0x92, 0x01,
	0x00, 0x00,
}
